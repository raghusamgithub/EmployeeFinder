Angular 


Here’s a detailed estimation and breakdown for the story “Block Address Changes for 24 hours after Debit/NOW Card Order”, including story points, subtasks, and considerations based on the analysis.


---

✅ Story Title:

Block Address Changes for 24 Hours After Debit/NOW Card Order

Epic/Feature:

Enhanced Security – Prevent sensitive changes post-card issuance


---

🎯 Acceptance Criteria:

1. Block address changes for 24 hours after a debit/NOW card order.


2. Applicable to Lost/Stolen, Replacement (Damaged), and New CheckCard.


3. Block address change functionality at both customer and account levels.


4. Show the user-friendly error message:

> "This function is not available this time. Please check back later or visit a local branch for assistance."






---

🔧 Subtasks and Estimations

1. Analysis and Design

Analyze Card Hub’s retrieve cards API and response structure.

Determine integration point in OLB for Change Mailing Address.

Finalize error message content with XD team.

Estimate: 2 story points



---

2. Implement Card Order Check

Integrate existing Card Hub retrieve card API.

Logic to determine if a card order was placed within the last 24 hours.

Unit test for multiple scenarios (Lost/Stolen, Replacement, New).

Estimate: 3 story points



---

3. Block Address Change Logic

Add conditional logic to prevent address changes.

Validate at both customer and account levels.

Backend validation to ensure robustness.

Estimate: 3 story points



---

4. Error Message Display

Modify the Change Mailing Address page in OLB to show error.

Ensure appropriate UX and accessibility standards.

Fallback for screen readers or alternate platforms.

Estimate: 2 story points



---

5. Write Test Cases and QA

Write positive and negative test cases.

QA test scenarios across environments (QA/Stage).

Verify timing: unblocking after 24 hours.

Estimate: 2 story points



---

6. Technical Debt and Temenos Consideration

Document the assumptions and potential refactor areas for Temenos.

Keep feature toggle or config-based logic to simplify future migration.

Estimate: 1 story point



---

7. Integration & Dependency Check with DPAIP

Coordinate with DPAIP team.

Confirm readiness before actual development starts.

Mock the dependency if not available for now.

Estimate: 1 story point



---

🧮 Total Estimation

Category	Story Points

Analysis & Design	2
Development (Card Check + Blocking + Error Message)	8
Testing & QA	2
Technical Debt / Future-Proofing	1
Dependency Coordination	1
Total	14 Story Points



---

🧭 User Flow Summary

1. Card is ordered (Lost/Stolen/Replacement/New).


2. Confirmation is sent.


3. User tries to update mailing address in OLB.


4. System checks Card Hub → if order ≤ 24 hours → error message shown.


5. If > 24 hours → allow address change.




---

📌 Notes

Pending XD team approval on error message.

Coordination required with DPAIP before dev starts.

Ensure graceful handling of API failure (fallbacks).

Add telemetry/logs to track blocked address change attempts.



---

Let me know if you want a Jira-ready version or tech stack-specific implementation guide next.

